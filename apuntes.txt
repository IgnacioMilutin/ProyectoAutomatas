CORRECCIONES:

-Listado de usuario con numeros
-Listado y preguntas todo juntos




INFORMACION SOBRE FORMAS Y CAMINOS A TOMAR:

-El archivo excel que debe ser entregado puede ser un df creado a partir de ir agregando las filas que coinciden con los filtros
-utilizar expresiuones regulares para mostrar que las fechas tienen un formato valido para ser comparado
-Fechas en .csv dadas como objeto, pasar a datetime, date o time (creo que converters, revisar en internet),
    tal vez no es necesario y se puede comparar en object con string, o dar argumento como object
-(extra)se pueden entregar graficas con estadisticas de lo pedido

DATOS Y FUNCIONES DE DOCUMENTACION DE PANDAS QUE PUEDEN SERVIR Y DATOS A TENER EN CUENTA:

-usecols filtra las columnas obtenidas y mostradas, no queda claro si es solo se puede usar con la funcion read_csv()
- .iloc[i,j] ubica un dato por posicion de fila=i y columna=j, se puede colocar : tal y como funciona la posicion de listas en python
- .loc[1:''] entre comillas se puede escribir el nombre de la columna, asi busca la fila i y columna de ese nombre, 
    se puede colocal mas de una columna con el sig formato ('','')
-para filtros de fila: df[(condicion) & (condicion)] , para llamar a la columna que queremos colocar el filtro: df['nombrefila']
-dentro del () de read_csv() se pude usar parce_dates=[] de distintas maneras para convertir siertas columnas en el tipo de dato datetime, 
    ver documentacion: IO tools, CSVs & text files, Date handling
-info de como escribir en documentacion: IO tools, CSVs & text files, writing out data . Buscar en el indice: to excel

filtro=((df['Inicio_de_Conexión_Dia']>=fecha_inicio) &
            (df['Inicio_de_Conexión_Hora']>=hora_inicio) &
            (df['Inicio_de_Conexión_Dia']<=fecha_fin) &
            (df['Inicio_de_Conexión_Hora']<=hora_fin) &
            (df['Usuario']==usuario))
    archivo_filtrado=df[filtro]

df_usuario=df[df['Usuario']==usuario].copy()
    df_fechas=df_usuario[(df['Inicio_de_Conexión_Dia']>=fecha_inicio) &
            (df['Inicio_de_Conexión_Hora']>=hora_inicio) &
            (df['Inicio_de_Conexión_Dia']<=fecha_fin) &
            (df['Inicio_de_Conexión_Hora']<=hora_fin)]

archivo_filtrado=df[(df['Inicio_de_Conexión_Dia']>=fecha_inicio) &
            (df['Inicio_de_Conexión_Hora']>=hora_inicio) &
            (df['Inicio_de_Conexión_Dia']<=fecha_fin) &
            (df['Inicio_de_Conexión_Hora']<=hora_fin) &
            (df['Usuario']==usuario)]
    print(archivo_filtrado)
    return archivo_filtrado

CODIGO DE HORA:

data_df['Inicio_de_Conexión_Hora'] = pd.to_datetime(data_df['Inicio_de_Conexión_Hora'], format='%H:%M:%S', errors='coerce').dt.time

def validacion_hora(hora):
    hora_re=r"^\d{2}:\d{2}:\d{2}$"
    if re.match(hora_re,hora):
        try:
            hora=datetime.strptime(hora,'%H:%M:%S').time()
            return hora
        except ValueError:
            print('hora no valida')
            return None
    else:
        print('hora no valida') 
        return None

#hora_inicio=input('ingrese la hora desde donde se quiere analizar: ')
#hora_fin=input('ingrese la hora hasta la cual se quiere analizar: ')

#hora_inicio=validacion_hora(hora_inicio)
#hora_fin=validacion_hora(hora_fin)



TKINTER:

-.pack a botones para que se ejecuten, buscar opciones dentro de .pack


import tkinter as tk
app=tk.Tk()

app.geometry("1200x900")
app.configure(background='lavender')
tk.Wm.wm_title(app,'Analizador de CSV')



tk.Label(
    app,
    text='ingrese el usuario y fechas que desea filtrar',
    font=(14),
    fg='black',
    bg='lavender',
    justify='center'
).pack()

tk.Button(
    app,
    text='FILTAR',
    font=('Modern', 16),
    bg='light sky blue',
    fg='Black',
).pack()

tk.Entry(
    app,
    textvariable='usuario: '
)

app.mainloop()


IKDEOPMJEC

